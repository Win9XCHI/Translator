G ({ id,;,:,.,...,..,(,),[,],literal,operation,while,import,execute,real,integer,bool,func,do,end,var,const,if,then,else,for,var,const,try,catch }, 
{ LIB,BLOCK,X,Y,Q,OPERATION,AFTER_ID,AFTER_TYPE,AFTER_IF,EXPRESSION_FOR,EXPRESSION_WHILE,PARAM,ELSE,PARAM_CATCH }, 
{ PROGRAM -> import LIB execute BLOCK end,
LIB -> id X,
X -> ; LIB,
X -> e,
BLOCK -> id OPERATION Y,
BLOCK -> id AFTER_ID Y,
BLOCK -> real AFTER_TYPE Y,
BLOCK -> integer AFTER_TYPE Y,
BLOCK -> bool AFTER_TYPE Y,
BLOCK -> if AFTER_IF Y,
BLOCK -> for id : EXPRESSION_FOR do BLOCK end,
BLOCK -> try BLOCK catch ( PARAM_CATCH ) BLOCK end,
BLOCK -> while EXPRESSION_WHILE then BLOCK end else BLOCK end ( EXPRESSION_WHILE ),
BLOCK -> e,
Y -> ; BLOCK,
Y -> e,
AFTER_TYPE -> id,
AFTER_TYPE -> id [ ],
OPERATION -> operation id,
OPERATION -> operation id ( PARAM ),
OPERATION -> operation literal,
OPERATION -> operation id OPERATION,
OPERATION -> operation id ( PARAM ) OPERATION,
OPERATION -> operation literal OPERATION,
AFTER_ID -> id,
AFTER_ID -> . id,
AFTER_ID -> : func ( PARAM ) : id do BLOCK end,
AFTER_ID -> ( PARAM ),
PARAM -> var id : id Q,
PARAM -> const id : id Q,
PARAM -> e,
Q -> ; PARAM,
AFTER_IF -> id OPERATION then BLOCK end ELSE,
AFTER_IF -> literal OPERATION then BLOCK end ELSE,
AFTER_IF -> id ( PARAM ) OPERATION then BLOCK end ELSE,
ELSE -> else BLOCK end,
ELSE -> e,
PARAM_CATCH -> ...,
PARAM_CATCH -> id : id Q,
EXPRESSION_FOR -> id OPERATION .. id OPERATION,
EXPRESSION_FOR -> literal OPERATION .. id OPERATION,
EXPRESSION_FOR -> id ( PARAM ) OPERATION .. id OPERATION,
EXPRESSION_FOR -> id .. id OPERATION,
EXPRESSION_FOR -> id ( PARAM ) .. id OPERATION,
EXPRESSION_FOR -> literal .. id OPERATION,
EXPRESSION_FOR -> id OPERATION .. literal OPERATION,
EXPRESSION_FOR -> literal OPERATION .. literal OPERATION,
EXPRESSION_FOR -> id ( PARAM ) OPERATION .. literal OPERATION,
EXPRESSION_FOR -> id .. literal OPERATION,
EXPRESSION_FOR -> id ( PARAM ) .. literal OPERATION,
EXPRESSION_FOR -> literal .. literal OPERATION,
EXPRESSION_FOR -> id OPERATION .. id ( PARAM ) OPERATION,
EXPRESSION_FOR -> literal OPERATION .. id ( PARAM ) OPERATION,
EXPRESSION_FOR -> id ( PARAM ) OPERATION .. id ( PARAM ) OPERATION,
EXPRESSION_FOR -> id .. id ( PARAM ) OPERATION,
EXPRESSION_FOR -> id ( PARAM ) .. id ( PARAM ) OPERATION,
EXPRESSION_FOR -> literal .. id ( PARAM ) OPERATION,
EXPRESSION_FOR -> id OPERATION .. id,
EXPRESSION_FOR -> literal OPERATION .. id,
EXPRESSION_FOR -> id ( PARAM ) OPERATION .. id,
EXPRESSION_FOR -> id .. id,
EXPRESSION_FOR -> id ( PARAM ) .. id,
EXPRESSION_FOR -> literal .. id,
EXPRESSION_FOR -> id OPERATION .. id ( PARAM ),
EXPRESSION_FOR -> literal OPERATION .. id ( PARAM ),
EXPRESSION_FOR -> id ( PARAM ) OPERATION .. id ( PARAM ),
EXPRESSION_FOR -> id .. id ( PARAM ),
EXPRESSION_FOR -> id ( PARAM ) .. id ( PARAM ),
EXPRESSION_FOR -> literal .. id ( PARAM ),
EXPRESSION_FOR -> id OPERATION .. literal,
EXPRESSION_FOR -> literal OPERATION .. literal,
EXPRESSION_FOR -> id ( PARAM ) OPERATION .. literal,
EXPRESSION_FOR -> id .. literal,
EXPRESSION_FOR -> id ( PARAM ) .. literal,
EXPRESSION_FOR -> literal .. literal,
EXPRESSION_WHILE -> id OPERATION,
EXPRESSION_WHILE -> literal OPERATION,
EXPRESSION_WHILE -> id ( PARAM ) OPERATION }, 
PROGRAM )