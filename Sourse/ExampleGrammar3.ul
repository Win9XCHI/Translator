G ({ id,;,:,.,...,..,(,),[,],literal,operation,while,import,execute,real,integer,bool,func,do,end,var,const,if,then,else,for,var,const,try,catch }, 
{ LIB,BLOCK,X,Y,Q,OPERATION,AFTER_ID,AFTER_AFTER_ID,AFTER_TYPE,AFTER_TYPE_TYPE,AFTER_ID_OP,R,AFTER_LITERAL_FOR,AFTER_AFTER_ID_FOR,AFTER_[,
AFTER_PARAM,AFTER_.._AFTER,AFTER_..,AFTER_.._LITERAL,AFTER_AFTER_ID_OP,AFTER_IF,EXPRESSION_FOR,AFTER_ID_FOR,EXPRESSION_WHILE,PARAM,ELSE,PARAM_CATCH }, 
{ PROGRAM -> import LIB execute BLOCK end,
LIB -> id X,
X -> . LIB,
X -> ; e,
X -> e,
BLOCK -> id AFTER_ID Y,
BLOCK -> real AFTER_TYPE Y,
BLOCK -> integer AFTER_TYPE Y,
BLOCK -> bool AFTER_TYPE Y,
BLOCK -> if AFTER_IF Y,
BLOCK -> for id : EXPRESSION_FOR do BLOCK end,
BLOCK -> try BLOCK catch ( PARAM_CATCH ) BLOCK end,
BLOCK -> while EXPRESSION_WHILE then BLOCK end else BLOCK end ( EXPRESSION_WHILE ),
BLOCK -> e,
Y -> ; BLOCK,
Y -> e,
AFTER_TYPE -> id AFTER_TYPE_TYPE ;,
AFTER_TYPE_TYPE -> [ ] e,
AFTER_TYPE_TYPE -> e,
OPERATION -> id AFTER_ID_OP AFTER_AFTER_ID_OP,
OPERATION -> literal AFTER_AFTER_ID_OP,
AFTER_ID_OP -> ( PARAM ),
AFTER_ID_OP -> operation OPERATION,
AFTER_AFTER_ID_OP -> operation OPERATION,
AFTER_AFTER_ID_OP -> e,
AFTER_ID -> id,
AFTER_ID -> . id,
AFTER_ID -> : func ( PARAM ) : id do BLOCK end,
AFTER_ID -> ( PARAM ),
AFTER_ID -> operation OPERATION Y,
AFTER_[ -> id ],
AFTER_[ -> literal ],
AFTER_[ -> ],
PARAM -> var id : id Q,
PARAM -> const id : id Q,
PARAM -> e,
Q -> ; PARAM,
AFTER_IF -> id AFTER_AFTER_ID,
AFTER_IF -> literal AFTER_AFTER_ID,
AFTER_AFTER_ID -> operation OPERATION then BLOCK end ELSE,
AFTER_AFTER_ID -> ( PARAM ) operation OPERATION then BLOCK end ELSE,
ELSE -> else BLOCK end,
ELSE -> e,
PARAM_CATCH -> ...,
PARAM_CATCH -> id : id Q,
AFTER_ID_FOR -> operation OPERATION .. AFTER_..,
AFTER_ID_FOR -> ( PARAM ) AFTER_PARAM,
AFTER_ID_FOR -> .. AFTER_..,
AFTER_PARAM -> operation OPERATION .. AFTER_..,
AFTER_PARAM -> .. AFTER_..,
AFTER_.. -> literal AFTER_.._LITERAL,
AFTER_.. -> id AFTER_.._AFTER,
AFTER_.._AFTER -> operation OPERATION,
AFTER_.._AFTER -> ( PARAM ) R,
AFTER_.._AFTER -> e,
R -> operation OPERATION,
R -> e,
AFTER_.._LITERAL -> operation OPERATION,
AFTER_.._LITERAL -> e,
AFTER_LITERAL_FOR -> operation OPERATION .. AFTER_..,
AFTER_LITERAL_FOR -> .. AFTER_..,
EXPRESSION_FOR -> id AFTER_ID_FOR,
EXPRESSION_FOR -> literal AFTER_LITERAL_FOR,
EXPRESSION_WHILE -> literal operation OPERATION,
EXPRESSION_WHILE -> id operation OPERATION }, 
PROGRAM )