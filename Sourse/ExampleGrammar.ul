G ({ id,;,:,...,..,(,),literal,operation,while,import,execute,real,integer,bool,func,do,end,var,const,if,then,else,for,var,const,try,catch }, 
{ LIB,BLOCK,COMMAND,X,Y,Q,EXPRESSION,FUNC_R,FUNC_CALL,OPERATOR,VARIABLE,ONE,TYPE,PARAM,CLASSIFIER,IF,ELSE,FOR,TRY,WHILE,PARAM_CATCH }, 
{ PROGRAM -> import LIB execute BLOCK end,
LIB -> id X,
X -> ; LIB,
X -> e,
BLOCK -> COMMAND Y,
Y -> ; BLOCK,
Y -> e,
COMMAND -> EXPRESSION,
COMMAND -> OPERATOR,
COMMAND -> FUNC_R,
COMMAND -> FUNC_CALL,
COMMAND -> VARIABLE,
EXPRESSION -> ONE operation ONE,
ONE -> id,
ONE -> literal,
ONE -> EXPRESSION,
VARIABLE -> TYPE id,
TYPE -> id,
TYPE -> real,
TYPE -> integer,
TYPE -> bool,
FUNC_R -> id : func ( PARAM ) : id do BLOCK end,
PARAM -> CLASSIFIER id : id Q,
PARAM -> e,
CLASSIFIER -> var,
CLASSIFIER -> const,
Q -> ; PARAM,
FUNC_CALL -> id ( PARAM ),
OPERATOR -> IF,
OPERATOR -> FOR,
OPERATOR -> TRY,
OPERATOR -> WHILE,
IF -> if EXPRESSION then BLOCK end ELSE,
ELSE -> else BLOCK end,
ELSE -> e,
FOR -> for id : EXPRESSION .. EXPRESSION do BLOCK end,
TRY -> try BLOCK catch ( PARAM_CATCH ) BLOCK end,
PARAM_CATCH -> ...,
PARAM_CATCH -> CLASSIFIER id : id Q,
WHILE -> while EXPRESSION then BLOCK end else BLOCK end ( EXPRESSION ) }, 
PROGRAM )
